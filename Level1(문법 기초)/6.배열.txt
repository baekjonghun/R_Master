행렬이 2차원 데이터라면 배열Array은 다차원 데이터다. 예를 들어, 2×3 차원의 데이터를 행렬로 표현한다면 2×3×4 차원의 데이터는 배열로 표현한다.




array : 배열을 생성한다.

array(
   data=NA,           # 데이터를 저장한 벡터
   dim=length(data),  # 배열의 차원. 이 값을 지정하지 않으면 1차원 배열이 생성된다.
   dimnames=NULL      # 차원의 이름
)
반환 값은 배열이다.




예를 들어, 3×4 차원의 배열은 dim에 c(3, 4)를 지정하여 생성한다.
> array(1:12, dim=c(3, 4))
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12



이번에는 같은 데이터로 2×2×3 차원의 배열을 만들어보자.
> (x <- array(1:12, dim=c(2, 2, 3)))
, , 1
     [,1] [,2]
[1,]    1   3
[2,]    2   4

, , 2
     [,1] [,2]
[1,]    5   7
[2,]    6   8

, , 3
     [,1] [,2]
[1,]    9   11
[2,]   10   12




위 결과에서 ‘, , 1’, ‘, , 2’, ‘, , 3’은 2×2×3 차원에서 가장 마지막에 지정한 차원(즉, 2×2×3에서 ×3)을 의미한다. 예를 들어, x[, , 3]은 2×2 배열을 반환한다.
> x[, , 3]
     [,1] [,2]
[1,]    9   11
[2,]   10   12




배열 데이터 접근
배열의 데이터를 접근하는 방법은 행렬의 경우와 차원의 수만 다를 뿐이지 차이가 없다. 따라서 색인, 이름 등으로 데이터를 접근할 수 있고 dim( )을 사용해 데이터의 차원을 알 수 있다.

다음은 배열 데이터를 접근하는 예를 보여준다.

> (x <- array(1:12, dim=c(2, 2, 3)))
, , 1
     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2
     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 3
     [,1] [,2]
[1,]    9   11
[2,]   10   12
> x[1, 1, 1]
[1] 1
> x[1, 2, 3]
[1] 11
> x[, , 3]
     [,1] [,2]
[1,]    9   11
[2,]   10   12
> dim(x)
[1] 2 2 3