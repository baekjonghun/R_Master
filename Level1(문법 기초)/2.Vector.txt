---------------------------------------Vector 란?------------------------------------------------------------------


벡터Vector는 다른 프로그래밍 언어에서 흔히 접하는 배열의 개념으로, 한 가지 스칼라 데이터 타입의 데이터를 저장할 수 있다.
 예를 들어, 숫자만 저장하는 배열, 문자열만 저장하는 배열이 벡터에 해당한다.

R의 벡터는 슬라이스Slice를 제공한다. 슬라이스란 배열의 일부를 잘라낸 뒤 이를 또 다시 배열처럼 다루는 개념을 뜻한다.

또한, 벡터의 각 셀에는 이름을 부여할 수 있다. 따라서 벡터에 저장된 요소들을 색인을 사용하여 접근하는 것뿐 아니라 이름을 사용해서도 접근할 수 있다. 이런 특징을 사용하면 데이터를 좀 더 의미 있는 형태로 저장할 수 있다.


> (x <- c(1, 2, 3, 4, 5))
[1] 1 2 3 4 5

예를 들어, 정수와 부동소수가 섞여 있다면 모두 부동소수로 변환되며, 정수와 문자열이 섞여 있다면 모두 문자열로 변환된다. 예를 들어, 아래 코드에서 숫자형 데이터인 2는 “2”라는 문자열 형태로 자동으로 변환되어 x 안에는 문자열 형태의 데이터만 나열된다.

> (x <- c("1", 2, "3"))
[1] "1" "2" "3"


벡터는 중첩할 수 없다. 따라서 벡터 안에 벡터를 생성하면 단일 차원의 벡터로 변경된다. 중첩된 구조가 필요하다면 역시 리스트를 사용해야 한다.

> c(1, 2, 3)
[1] 1 2 3
> c(1, 2, 3, c(1, 2, 3))
[1] 1 2 3 1 2 3

names( )는 값을 얻어오는 함수고, names<-( )는 값을 할당하는 함수다. 이 생소한 문법의 할당 함수가 다른 언어와 다른 점 중 하나다.

> x <- c(1, 3, 4)
> names (x) <- c("kim", "seo", "park")
> x
kim seo park
1 3 4

-------------벡터의 접근------------------------

x[n]

벡터 x의 n번째 요소. n은 숫자 또는 셀의 이름을 뜻하는 문자열

x[-n]

벡터 x에서 n번째 요소를 제외한 나머지. n은 숫자 또는 셀의 이름을 뜻하는 문자열

x[idx_vector]

벡터 x로부터 idx_vector에 지정된 요소를 얻어옴. 이때 idx_vector는 색인을 표현하는 숫자 벡터 또는 셀의 이름을 표현하는 문자열 벡터

x[start:end]

벡터 x의 start부터 end까지의 값을 반환함. 반환 값은 start 위치의 값과 end 위치의 값을 모두 포함함

-------------벡터 관련 함수-----------------------
length : 객체의 길이를 반환한다.

length(
   x  # R 객체. 팩터, 배열, 리스트를 지정한다.
)
반환 값은 객체의 길이다


NROW : 배열의 행 또는 열의 수를 반환한다.

NROW(
   x  # 벡터, 배열 또는 데이터 프레임 
)
반환 값은 행의 수다


--------------------벡터의 사용----------------------------------------------------

벡터는 [ ] 안에 색인을 적어 각 요소를 가져올 수 있다. 이때, 색인은 다른 언어와 달리 1부터 시작한다.
> x <- c("a", "b", "c")
> x[1]
[1] "a"
> x[3]
[1] "c"


x[-1]은 제일 첫 번째 요소인 “a”를 제외한 경우고, x[-2]는 두 번째 요소인 “b”를 제외한 경우다.
여러 위치에 저장된 값을 한 번에 가져오려면 ‘벡터명[색인 벡터]’ 형식을 사용한다.
> x <- c("a", "b", "c")
> x[-1]
[1] "b" "c"
> x[-2]
[1] "a" "c"


> x <- c("a", "b", "c")
> x[c(1, 2)]
[1] "a" "b"
> x[c(1, 3)]
[1] "a" "c"


> x <- c("a", "b", "c")
> x[1:2]
[1] "a" "b"
> x[1:3]
[1] "a" "b" "c"



> x <- c(1, 3, 4)
> names (x) <- c("kim", "seo", "park")
> x
kim seo park
1 3 4
> x["seo"]
seo
3
> x[c("seo", "park")]
seo park
3 4

벡터에 부여된 이름만 보려면 이름을 부여할 때와 마찬가지로 names( )를 사용한다. 다음은 벡터의 두 번째 요소에 부여한
 이름이 “seo”임을 보여준다.

> names(x) [2]
[1] "seo"



벡터의 길이는 length( ) 또는 NROW( )를 통해 알 수 있다(NROW( )가 대문자임에 주의하기 바란다). 본래 nrow( )는 뒤에서 설명할 행렬과 데이터 프레임의 행의 수를 알려주는 함수지만, nrow( )의 변형인 NROW( )는 인자가 벡터인 경우 벡터를 n행 1열의 행렬로 취급해 길이를 반환한다. 따라서 데이터 타입에 무관하게 길이를 알고 싶은 경우 length( ), nrow( ), NROW( )의 구분 없이 항상 NROW( )만 사용하면 대부분 문제없이 동작한다.



-----------------------연속된 숫자로 구성된 벡터--------------------------------------


seq : 시퀀스를 생성한다.

seq(
  from,  # 시작 값 
  to,    # 끝 값 
  by     # 증가치 
)
from부터 to까지의 값을 by 간격으로 저장한 숫자 벡터를 반환한다.




seq_along : 주어진 객체의 길이만큼 시퀀스를 생성한다.

seq_along(
  along.with  # 이 인자 길이만큼 시퀀스를 생성한다. 
)
반환 값은 along.with의 길이가 N일 때, 1부터 N까지의 숫자를 저장한 벡터다.



> seq(3, 7)     # 1씩 증가
[1] 3 4 5 6 7
> seq(7, 3)     # 1씩 감소
[1] 7 6 5 4 3
> seq(3, 7, 2)  # 2씩 증가
[1] 3 5 7
> seq(3, 7, 3)  # 3씩 증가
[1] 3 6



1씩 증가 또는 감소하는 벡터의 경우 seq( )를 사용하지 않고 ‘start:end’ 형태의 축약형으로도 표현할 수 있다
> 3:7
[1] 3 4 5 6 7
> 7:3
[1] 7 6 5 4 3




1부터 주어진 벡터의 길이 N까지의 값을 저장한 색인 벡터가 필요한 경우 NROW( )로 길이를 얻어 색인 벡터를 만들 수 있다. 또는 seq_along(x)를 사용해 x의 길이까지의 값을 담은 벡터를 생성할 수 있다.

> x <- c(2, 4, 6, 8, 10)
> 1:NROW(x)
[1] 1 2 3 4 5
> seq_along(x)
[1] 1 2 3 4 5

------------------------반복-------------------------------------------------

rep : 주어진 값을 반복한다.

rep(
   x,      # 반복할 값이 저장된 벡터 
   times,  # 전체 벡터의 반복 횟수 
   each    # 개별 값의 반복 횟수 
)
반환 값은 반복된 값이 저장된 x와 같은 타입의 객체다.



times와 each의 의미는 다음 예를 통해 쉽게 이해할 수 있다. 숫자 1, 2에 대해 times=5를 지정하면 1, 2의 나열이 5회 반복된다.
> rep(1:2, times=5)
[1] 1 2 1 2 1 2 1 2 1 2


each=5를 지정하면 개별 값이 5회 반복된다. 즉, 1이 5회 반복된 후 2가 5회 반복된다
> rep(1:2, each=5)
[1] 1 1 1 1 1 2 2 2 2 2


each=5, times=2를 지정하면 개별 값의 5회 반복을 총 2회 반복한다.
> rep(1:2, each=5, times=2)
[1] 1 1 1 1 1 2 2 2 2 2 1 1 1 1 1 2 2 2 2 2

